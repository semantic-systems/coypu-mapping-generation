#!/usr/bin/env python3
from argparse import ArgumentParser
import logging
from typing import List, Type


from semanticlabeling.labelinferencer import SemanticLabelInferencer
from util.file import InputFile
from util import graphbuilder, graphvisualizer
from util.knowledgesource import KnowledgeSource

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def main(
        input_file_path: str,
        input_file_cls: Type[InputFile],
        target_ontology_paths: List[str],
        visualize: bool
):
    logger.info(
        f'Semantic label inferencing called with input file {input_file_path} '
        f'and target ontologies {" ".join(target_ontology_paths)}')

    ontologies = list([KnowledgeSource(path) for path in target_ontology_paths])

    # input_file holds a list of labeled columns:
    # (Pdb) pp(input_file.__dict__)
    # {'columns': [<semanticlabeling.labeledcolumn.IDColumn object at 0x12c737080>,
    #              <semanticlabeling.labeledcolumn.CategoriesColumn object at 0x12c2dec60>,
    #              <semanticlabeling.labeledcolumn.CategoriesColumn object at 0x12cba3890>,
    #              <semanticlabeling.labeledcolumn.TextColumn object at 0x117c39100>,
    #              <semanticlabeling.labeledcolumn.WGS84LatitudeColumn object at 0x117e518e0>,
    #              <semanticlabeling.labeledcolumn.WGS84LongitudeColumn object at 0x12cba36b0>,
    #              <semanticlabeling.labeledcolumn.TextColumn object at 0x12cc2a3c0>,
    #              <semanticlabeling.labeledcolumn.DateTimeColumn object at 0x12c6a37d0>]}
    #
    # Columns may have links between them, however, usually there are only links
    # from the ID column to the remaining ones:
    # (Pdb) pp([(c, c.links) for c in input_file.columns])
    # [(<semanticlabeling.labeledcolumn.IDColumn object at 0x12c737080>,
    #   {
    #       'altLabel': [<semanticlabeling.labeledcolumn.TextColumn object at 0x117c39100>],
    #       'date': [<semanticlabeling.labeledcolumn.DateTimeColumn object at 0x12c6a37d0>],
    #       'hasCountryLocation': [<semanticlabeling.labeledcolumn.CategoriesColumn object at 0x12c2dec60>],
    #       'label': [<semanticlabeling.labeledcolumn.TextColumn object at 0x12cc2a3c0>],
    #       'lat': [<semanticlabeling.labeledcolumn.WGS84LatitudeColumn object at 0x117e518e0>],
    #       'lon': [<semanticlabeling.labeledcolumn.WGS84LongitudeColumn object at 0x12cba36b0>],
    #       'type': [<semanticlabeling.labeledcolumn.CategoriesColumn object at 0x12cba3890>]
    #   }
    #  ),
    #  (<semanticlabeling.labeledcolumn.CategoriesColumn object at 0x12c2dec60>,
    #   {}
    #  ),
    #  (<semanticlabeling.labeledcolumn.CategoriesColumn object at 0x12cba3890>,
    #   {}
    #  ),
    #  (<semanticlabeling.labeledcolumn.TextColumn object at 0x117c39100>,
    #   {}
    #  ),
    #  (<semanticlabeling.labeledcolumn.WGS84LatitudeColumn object at 0x117e518e0>,
    #   {}
    #  ),
    #  (<semanticlabeling.labeledcolumn.WGS84LongitudeColumn object at 0x12cba36b0>,
    #   {}
    #  ),
    #  (<semanticlabeling.labeledcolumn.TextColumn object at 0x12cc2a3c0>,
    #   {}
    #  ),
    #  (<semanticlabeling.labeledcolumn.DateTimeColumn object at 0x12c6a37d0>,
    #   {}
    #  )
    # ]
    input_file = input_file_cls(input_file_path=input_file_path)

    label_inferencer = SemanticLabelInferencer(input_file, ontologies)
    graph = label_inferencer.get_graph()

    if visualize:
        graphvisualizer.visualize(graph)

    raise NotImplementedError()


if __name__ == '__main__':
    arg_parser = ArgumentParser()
    arg_parser.add_argument('input_file')

    arg_parser.add_argument(
        '--filetype',
        default='csv',
        help='csv or sampled_csv'
    )

    arg_parser.add_argument('target_ontologies', nargs='+')
    arg_parser.add_argument('--visualize', action='store_true')

    args = arg_parser.parse_args()

    input_file_path = args.input_file

    input_file_cls = InputFile.get_file_type_by_str(args.filetype)

    target_ontology_paths = args.target_ontologies
    main(
        input_file_path=input_file_path,
        input_file_cls=input_file_cls,
        target_ontology_paths=target_ontology_paths,
        visualize=args.visualize
    )
